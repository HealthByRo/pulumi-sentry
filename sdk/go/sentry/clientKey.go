// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ClientKey struct {
	pulumi.CustomResourceState

	DateCreated      pulumi.StringPtrOutput `pulumi:"dateCreated"`
	DsnCSP           pulumi.StringPtrOutput `pulumi:"dsnCSP"`
	DsnPublic        pulumi.StringPtrOutput `pulumi:"dsnPublic"`
	DsnSecret        pulumi.StringPtrOutput `pulumi:"dsnSecret"`
	Name             pulumi.StringOutput    `pulumi:"name"`
	OrganizationSlug pulumi.StringOutput    `pulumi:"organizationSlug"`
	ProjectSlug      pulumi.StringOutput    `pulumi:"projectSlug"`
	Public           pulumi.StringPtrOutput `pulumi:"public"`
	Secret           pulumi.StringPtrOutput `pulumi:"secret"`
}

// NewClientKey registers a new resource with the given unique name, arguments, and options.
func NewClientKey(ctx *pulumi.Context,
	name string, args *ClientKeyArgs, opts ...pulumi.ResourceOption) (*ClientKey, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.OrganizationSlug == nil {
		return nil, errors.New("missing required argument 'OrganizationSlug'")
	}
	if args == nil || args.ProjectSlug == nil {
		return nil, errors.New("missing required argument 'ProjectSlug'")
	}
	if args == nil {
		args = &ClientKeyArgs{}
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"dsnSecret",
		"secret",
	})
	opts = append(opts, secrets)
	var resource ClientKey
	err := ctx.RegisterResource("sentry:index:ClientKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientKey gets an existing ClientKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientKeyState, opts ...pulumi.ResourceOption) (*ClientKey, error) {
	var resource ClientKey
	err := ctx.ReadResource("sentry:index:ClientKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientKey resources.
type clientKeyState struct {
	DateCreated      *string `pulumi:"dateCreated"`
	DsnCSP           *string `pulumi:"dsnCSP"`
	DsnPublic        *string `pulumi:"dsnPublic"`
	DsnSecret        *string `pulumi:"dsnSecret"`
	Name             *string `pulumi:"name"`
	OrganizationSlug *string `pulumi:"organizationSlug"`
	ProjectSlug      *string `pulumi:"projectSlug"`
	Public           *string `pulumi:"public"`
	Secret           *string `pulumi:"secret"`
}

type ClientKeyState struct {
	DateCreated      pulumi.StringPtrInput
	DsnCSP           pulumi.StringPtrInput
	DsnPublic        pulumi.StringPtrInput
	DsnSecret        pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	OrganizationSlug pulumi.StringPtrInput
	ProjectSlug      pulumi.StringPtrInput
	Public           pulumi.StringPtrInput
	Secret           pulumi.StringPtrInput
}

func (ClientKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientKeyState)(nil)).Elem()
}

type clientKeyArgs struct {
	Name             string `pulumi:"name"`
	OrganizationSlug string `pulumi:"organizationSlug"`
	ProjectSlug      string `pulumi:"projectSlug"`
}

// The set of arguments for constructing a ClientKey resource.
type ClientKeyArgs struct {
	Name             pulumi.StringInput
	OrganizationSlug pulumi.StringInput
	ProjectSlug      pulumi.StringInput
}

func (ClientKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientKeyArgs)(nil)).Elem()
}

type ClientKeyInput interface {
	pulumi.Input

	ToClientKeyOutput() ClientKeyOutput
	ToClientKeyOutputWithContext(ctx context.Context) ClientKeyOutput
}

func (ClientKey) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientKey)(nil)).Elem()
}

func (i ClientKey) ToClientKeyOutput() ClientKeyOutput {
	return i.ToClientKeyOutputWithContext(context.Background())
}

func (i ClientKey) ToClientKeyOutputWithContext(ctx context.Context) ClientKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientKeyOutput)
}

type ClientKeyOutput struct {
	*pulumi.OutputState
}

func (ClientKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientKeyOutput)(nil)).Elem()
}

func (o ClientKeyOutput) ToClientKeyOutput() ClientKeyOutput {
	return o
}

func (o ClientKeyOutput) ToClientKeyOutputWithContext(ctx context.Context) ClientKeyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClientKeyOutput{})
}
