// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ClientKey extends pulumi.CustomResource {
    /**
     * Get an existing ClientKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ClientKey {
        return new ClientKey(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index:ClientKey';

    /**
     * Returns true if the given object is an instance of ClientKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientKey.__pulumiType;
    }

    public /*out*/ readonly dateCreated!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dsnCSP!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dsnPublic!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dsnSecret!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string | undefined>;
    public readonly organizationSlug!: pulumi.Output<string | undefined>;
    public readonly projectSlug!: pulumi.Output<string | undefined>;
    public /*out*/ readonly public!: pulumi.Output<string | undefined>;
    public /*out*/ readonly secret!: pulumi.Output<string | undefined>;

    /**
     * Create a ClientKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientKeyArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.organizationSlug === undefined) {
                throw new Error("Missing required property 'organizationSlug'");
            }
            if (!args || args.projectSlug === undefined) {
                throw new Error("Missing required property 'projectSlug'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["organizationSlug"] = args ? args.organizationSlug : undefined;
            inputs["projectSlug"] = args ? args.projectSlug : undefined;
            inputs["dateCreated"] = undefined /*out*/;
            inputs["dsnCSP"] = undefined /*out*/;
            inputs["dsnPublic"] = undefined /*out*/;
            inputs["dsnSecret"] = undefined /*out*/;
            inputs["public"] = undefined /*out*/;
            inputs["secret"] = undefined /*out*/;
        } else {
            inputs["dateCreated"] = undefined /*out*/;
            inputs["dsnCSP"] = undefined /*out*/;
            inputs["dsnPublic"] = undefined /*out*/;
            inputs["dsnSecret"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["organizationSlug"] = undefined /*out*/;
            inputs["projectSlug"] = undefined /*out*/;
            inputs["public"] = undefined /*out*/;
            inputs["secret"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const secretOpts = { additionalSecretOutputs: ["dsnSecret", "secret"] };
        opts = opts ? pulumi.mergeOptions(opts, secretOpts) : secretOpts;
        super(ClientKey.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a ClientKey resource.
 */
export interface ClientKeyArgs {
    readonly name: pulumi.Input<string>;
    readonly organizationSlug: pulumi.Input<string>;
    readonly projectSlug: pulumi.Input<string>;
}
